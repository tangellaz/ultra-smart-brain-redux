{"ast":null,"code":"import { ADD_FACE_BOX, ON_INPUT_CHANGE, LOAD_DATA, UPDATE_DATA, URL_ENTERED, SIGN_IN, ROUTE, POST_REQUEST_PENDING, POST_REQUEST_SUCCESS, POST_REQUEST_FAILED } from './constants.js';\nexport const addFaceBox = box => ({\n  type: ADD_FACE_BOX,\n  payload: box\n});\nexport const changeInput = input => ({\n  type: ON_INPUT_CHANGE,\n  payload: input\n});\nexport const updateUserInfo = data => {\n  if (typeof data == \"object\") {\n    return {\n      type: LOAD_DATA,\n      payload: data\n    };\n  } else {\n    return {\n      type: UPDATE_DATA,\n      payload: data\n    };\n  }\n};\nexport const updateImageUrl = url => ({\n  type: URL_ENTERED,\n  payload: url\n});\nexport const updateSignIn = data => ({\n  type: SIGN_IN,\n  payload: data\n});\nexport const updateRoute = data => ({\n  type: ROUTE,\n  payload: data\n});\nexport const requestPost = () => (dispatch, getState) => {\n  dispatch({\n    type: POST_REQUEST_PENDING\n  });\n  const input = getState().inputStateChange.input.input;\n  console.log('getState().inputStateChange.input=', getState().inputStateChange.input);\n  console.log('input=', input);\n  fetch(' https://boiling-sea-92403.herokuapp.com/imageurl', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      input: input\n    })\n  }).then(response => response.json()).then(response => {\n    console.log('response=', response);\n    dispatch({\n      type: POST_REQUEST_SUCCESS,\n      payload: response\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: POST_REQUEST_FAILED,\n      payload: err\n    });\n  });\n};","map":{"version":3,"sources":["/home/tywa/Documents/TheCompleteWebDeveloper/smart-brain/smart-brain-Redux/src/actions.js"],"names":["ADD_FACE_BOX","ON_INPUT_CHANGE","LOAD_DATA","UPDATE_DATA","URL_ENTERED","SIGN_IN","ROUTE","POST_REQUEST_PENDING","POST_REQUEST_SUCCESS","POST_REQUEST_FAILED","addFaceBox","box","type","payload","changeInput","input","updateUserInfo","data","updateImageUrl","url","updateSignIn","updateRoute","requestPost","dispatch","getState","inputStateChange","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","catch","err"],"mappings":"AAAA,SACCA,YADD,EAECC,eAFD,EAGCC,SAHD,EAICC,WAJD,EAKCC,WALD,EAMCC,OAND,EAOCC,KAPD,EAQCC,oBARD,EASCC,oBATD,EAUCC,mBAVD,QAWO,gBAXP;AAaA,OAAO,MAAMC,UAAU,GAAIC,GAAD,KAAU;AACnCC,EAAAA,IAAI,EAAEZ,YAD6B;AAEnCa,EAAAA,OAAO,EAAEF;AAF0B,CAAV,CAAnB;AAKP,OAAO,MAAMG,WAAW,GAAIC,KAAD,KAAY;AACtCH,EAAAA,IAAI,EAAEX,eADgC;AAEtCY,EAAAA,OAAO,EAAEE;AAF6B,CAAZ,CAApB;AAKP,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACvC,MAAI,OAAOA,IAAP,IAAgB,QAApB,EAA8B;AAC7B,WAAO;AACNL,MAAAA,IAAI,EAAEV,SADA;AAENW,MAAAA,OAAO,EAAEI;AAFH,KAAP;AAIA,GALD,MAKO;AACN,WAAO;AACNL,MAAAA,IAAI,EAAET,WADA;AAENU,MAAAA,OAAO,EAAEI;AAFH,KAAP;AAIA;AACD,CAZM;AAcP,OAAO,MAAMC,cAAc,GAAIC,GAAD,KAAU;AACvCP,EAAAA,IAAI,EAAER,WADiC;AAEvCS,EAAAA,OAAO,EAAEM;AAF8B,CAAV,CAAvB;AAKP,OAAO,MAAMC,YAAY,GAAIH,IAAD,KAAW;AACtCL,EAAAA,IAAI,EAAEP,OADgC;AAEtCQ,EAAAA,OAAO,EAAEI;AAF6B,CAAX,CAArB;AAKP,OAAO,MAAMI,WAAW,GAAIJ,IAAD,KAAW;AACrCL,EAAAA,IAAI,EAAEN,KAD+B;AAErCO,EAAAA,OAAO,EAAEI;AAF4B,CAAX,CAApB;AAKP,OAAO,MAAMK,WAAW,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACxDD,EAAAA,QAAQ,CAAC;AAAEX,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AADwD,QAEhDQ,KAFgD,GAEtCS,QAAQ,GAAGC,gBAAX,CAA4BV,KAFU,CAEhDA,KAFgD;AAGxDW,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAiDH,QAAQ,GAAGC,gBAAX,CAA4BV,KAA7E;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBZ,KAArB;AACAa,EAAAA,KAAK,CAAC,mDAAD,EAAsD;AACtDC,IAAAA,MAAM,EAAE,MAD8C;AAEtDC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB,KAF6C;AAGtDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBlB,MAAAA,KAAK,EAAEA;AADY,KAAf;AAHgD,GAAtD,CAAL,CAOImB,IAPJ,CAOSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPrB,EAQIF,IARJ,CAQSC,QAAQ,IAAI;AAChBT,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBQ,QAAxB;AACAZ,IAAAA,QAAQ,CAAC;AAAEX,MAAAA,IAAI,EAAEJ,oBAAR;AAA8BK,MAAAA,OAAO,EAAEsB;AAAvC,KAAD,CAAR;AACD,GAXJ,EAYIE,KAZJ,CAYUC,GAAG,IAAI;AACbZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AACAf,IAAAA,QAAQ,CAAC;AAAEX,MAAAA,IAAI,EAAEH,mBAAR;AAA6BI,MAAAA,OAAO,EAAEyB;AAAtC,KAAD,CAAR;AACA,GAfJ;AAgBA,CArBM","sourcesContent":["import {\n\tADD_FACE_BOX,\n\tON_INPUT_CHANGE,\n\tLOAD_DATA,\n\tUPDATE_DATA,\n\tURL_ENTERED,\n\tSIGN_IN,\n\tROUTE,\n\tPOST_REQUEST_PENDING,\n\tPOST_REQUEST_SUCCESS,\n\tPOST_REQUEST_FAILED\n} from './constants.js'\n\nexport const addFaceBox = (box) => ({\n\ttype: ADD_FACE_BOX,\n\tpayload: box\n})\n\nexport const changeInput = (input) => ({\n\ttype: ON_INPUT_CHANGE,\n\tpayload: input\n})\n\nexport const updateUserInfo = (data) => {\n\tif (typeof(data) == \"object\") {\n\t\treturn {\n\t\t\ttype: LOAD_DATA,\n\t\t\tpayload: data\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\ttype: UPDATE_DATA,\n\t\t\tpayload: data\n\t\t}\n\t}\n}\n\nexport const updateImageUrl = (url) => ({\n\ttype: URL_ENTERED,\n\tpayload: url\n})\n\nexport const updateSignIn = (data) => ({\n\ttype: SIGN_IN,\n\tpayload: data\n})\n\nexport const updateRoute = (data) => ({\n\ttype: ROUTE,\n\tpayload: data\n})\n\nexport const requestPost = () => (dispatch, getState) => {\n\tdispatch({ type: POST_REQUEST_PENDING})\n\tconst { input } = getState().inputStateChange.input;\n\tconsole.log('getState().inputStateChange.input=',getState().inputStateChange.input);\n\tconsole.log('input=',input);\n\tfetch(' https://boiling-sea-92403.herokuapp.com/imageurl', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        input: input\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      console.log('response=',response);\n      dispatch({ type: POST_REQUEST_SUCCESS, payload: response})\n    })\n    .catch(err => {\n    \tconsole.log(err);\n    \tdispatch({ type: POST_REQUEST_FAILED, payload: err});\n    });\n}"]},"metadata":{},"sourceType":"module"}